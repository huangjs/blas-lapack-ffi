{
hunk ./trivial-features-tests.asd 46
-    (funcall (find-symbol (symbol-name '#:do-tests)))))
+    (funcall (find-symbol "DO-TESTS"))))
hunk ./src/tf-scl.lisp 44
-;;; SCL already pushes :amd64, :x86, :sparc, :sparc64, :hppa and :hppa64.
-;;; For 64 bit CPUs the SCL pushes: :64bit
+;;; SCL already pushes :PPC (exports this on PPC64 too, though),
+;;; :PPC64, :X86, :SPARC, :SPARC64, :HPPA and :HPPA64.
hunk ./src/tf-scl.lisp 40
-;;; SCL already pushes :unix, :bsd, :linux, :hpux, and :solaris
+;;; SCL already pushes :UNIX, :BSD, :LINUX and :DARWIN
hunk ./SPEC 70
-x86-64, and :PPC on ppc64.  SBCL doesn't.  Other ways
+x86-64, and :PPC on ppc64.  SCL does that, SBCL doesn't.  Other ways
hunk ./release.sh 143
-#echo "Building and uploading documentation..."
-#make -C doc upload-docs
+echo "Building and uploading documentation..."
+make -C doc upload-docs
hunk ./trivial-features.asd 33
-  :version "0.3"
+  :version "0.2"
hunk ./release.sh 113
-
-echo "Updating ${PROJECT_NAME}_latest links..."
-ssh $HOST ln -sf "$TARBALL" "$RELEASE_DIR/${PROJECT_NAME}_latest.tar.gz"
-ssh $HOST ln -sf "$SIGNATURE" "$RELEASE_DIR/${PROJECT_NAME}_latest.tar.gz.asc"
-
-if [ "$VERSION_FILE" ]; then
-    echo "Uploading $VERSION_FILE..."
-    echo -n "$VERSION" > "$VERSION_FILE"
-    scp "$VERSION_FILE" "$HOST":"$VERSION_FILE_DIR"
-    rm "$VERSION_FILE"
-fi
-
-while true; do
-    echo -n "Clean local tarball and signature? [y] "
-    read -n 1 response
-    case "$response" in
-        y|'')
-            echo
-            rm "$TARBALL" "$SIGNATURE"
-            break
-            ;;
-        n)
-            break
-            ;;
-        *)
-            echo "Invalid response '$response'. Try again."
-            ;;
-    esac
-done
-
-echo "Building and uploading documentation..."
-make -C doc upload-docs
-
-echo "Pushing changes..."
-darcs push
+echo "Don't forget to update the link on the CLiki page!"
hunk ./release.sh 111
-scp "$TARBALL" "$SIGNATURE" "$HOST:$RELEASE_DIR"
+scp "$TARBALL" "$SIGNATURE" common-lisp.net:"$RELEASE_DIR"
+
hunk ./release.sh 108
-gpg -b -a "$TARBALL"
+gpg -b -a "$TARBALL_NAME.tar.gz"
hunk ./release.sh 93
-
-echo "Updating $ASDF_FILE with new version: $VERSION"
-sed -e "s/:version \"$CURRENT_VERSION\"/:version \"$VERSION\"/" \
-    "$ASDF_FILE" > "$ASDF_FILE.tmp"
-mv "$ASDF_FILE.tmp" "$ASDF_FILE"
-
-darcs record -m "update $ASDF_FILE for version $VERSION"
+RELEASE_DIR=${RELEASE_DIR:="public_html/tarballs/trivial-features/"}
hunk ./release.sh 3
-### Configuration
-
-PROJECT_NAME='trivial-features'
-ASDF_FILE="$PROJECT_NAME.asd"
-HOST="common-lisp.net"
-RELEASE_DIR="public_html/tarballs/trivial-features/"
-VERSION_FILE=""
-#VERSION_FILE="VERSION"
-#VERSION_FILE_DIR="/project/$PROJECT_NAME/public_html"
-
-set -e
-
-### Process options
-
-FORCE=0
-VERSION=""
-
-while [ $# -gt 0 ]; do
-    case "$1" in
-        -h|--help)
-            echo "No help, sorry. Read the source."
-            exit 0
-            ;;
-        -f|--force)
-            FORCE=1
-            shift
-            ;;
-        -v|--version)
-            VERSION="$2"
-            shift 2
-            ;;
-        *)
-            echo "Unrecognized argument '$1'"
-            exit 1
-            ;;
-    esac
-done
-
-### Check for unrecorded changes
-
-if darcs whatsnew; then
-    echo -n "Unrecorded changes. "
-    if [ "$FORCE" -ne 1  ]; then
-        echo "Aborting."
-        echo "Use -f or --force if you want to make a release anyway."
-        exit 1
-    else
-        echo "Continuing anyway."
-    fi
-fi
-
-### Determine new version number
-
-if [ -z "$VERSION" ]; then
-    CURRENT_VERSION=$(grep :version $ASDF_FILE | cut -d\" -f2)
-
-    dots=$(echo "$CURRENT_VERSION" | tr -cd '.')
-    count=$(expr length "$dots" + 1)
-    declare -a versions
-
-    for i in $(seq $count); do
-        new=""
-        for j in $(seq $(expr $i - 1)); do
-            p=$(echo "$CURRENT_VERSION" | cut -d. -f$j)
-            new="$new$p."
-        done
-        part=$(expr 1 + $(echo "$CURRENT_VERSION" | cut -d. -f$i))
-        new="$new$part"
-        for j in $(seq $(expr $i + 1) $count); do new="$new.0"; done
-        versions[$i]=$new
-    done
-
-    while true; do
-        echo "Current version is $CURRENT_VERSION. Which will be next one?"
-        for i in $(seq $count); do echo "    $i) ${versions[$i]}"; done
-        echo -n "? "
-        read choice
-
-        if ((choice > 0)) && ((choice <= ${#versions[@]})); then
-            VERSION=${versions[$choice]}
-            break
-        fi
-    done
-fi
-
-### Do it
-
-TARBALL_NAME="${PROJECT_NAME}_${VERSION}"
+VERSION=${VERSION:=`grep :version trivial-features.asd | cut -d\" -f2`}
+TARBALL_NAME="trivial-features_$VERSION"
hunk ./release.sh 1
-#!/bin/bash
+#!/bin/sh
hunk ./src/tf-ecl.lisp 52
-#+x86_64 (pushnew :x86-64 *features*)
}
